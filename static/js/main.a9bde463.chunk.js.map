{"version":3,"sources":["components/Titles.js","components/Form.js","components/Wheater.js","App.js","serviceWorker.js","index.js"],"names":["Titles","react_default","a","createElement","className","Component","Form","autocomplete","onSubmit","this","props","getWeather","type","name","placeholder","Weather","city","country","temperature","humidity","pressure","description","error","API_KEY","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","_ref","asyncToGenerator","regenerator_default","mark","_callee","event","api_call","data","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","concat","sent","json","setState","main","temp","sys","weather","undefined","stop","_x","apply","arguments","state","presurre","components_Titles","components_Form","Wheater","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a9bde463.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\n\r\n\r\nclass Titles extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"Titles\">\r\n      <h1>Weather Finder</h1>\r\n      <p>Find out temperature, conditions and more...</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Titles;\r\n","import React, { Component } from 'react';\r\n\r\n\r\nclass Form extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n      <form autocomplete=\"off\" onSubmit={this.props.getWeather}>\r\n          <input type=\"text\" name=\"city\" placeholder=\"City\"></input>\r\n          <input type=\"text\" name=\"country\" placeholder=\"Country\"></input>\r\n          <button>Get Weather</button>\r\n      </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Form;\r\n\r\n","import React, { Component } from 'react';\r\n\r\nclass Weather extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.props.city && this.props.country &&  <p>Lacation: {this.props.city}, {this.props.country}</p>}\r\n        {this.props.temperature && <p>Temperature: {this.props.temperature}</p>}\r\n        {this.props.humidity && <p>Humidity: {this.props.humidity}</p>} \r\n        {this.props.pressure && <p>Presurre: {this.props.pressure}</p>}\r\n        {this.props.description && <p>Conditions: {this.props.description}</p>} \r\n        {this.props.error && <p>{this.props.error}</p>}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Weather;\r\n","import React, { Component } from 'react';\n\nimport './App.css';\nimport Titles from './components/Titles'\nimport Form from './components/Form'\nimport Weather from './components/Wheater'\n\nconst API_KEY = 'b9c69455dbb3239dc4e101921f2b9e60';\n\nclass App extends Component {\n  constructor (props) {\n    super(props);\n    this.state = {\n    temperature: undefined,\n    city: undefined,\n    country: undefined,\n    humidity: undefined,\n    presurre: undefined,\n    description: undefined,\n    error: undefined,\n}\n  }\n  getWeather = async (event) => {\n    event.preventDefault();\n    const city = event.target.elements.city.value;\n    const country = event.target.elements.country.value;\n   const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}&units=metric`);\n   const data = await api_call.json();\n  \n   if(city && country){\n    this.setState({\n     temperature: data.main.temp,\n     city: data.name,\n     country: data.sys.country,\n     humidity: data.main.humidity,\n     pressure: data.main.pressure,\n     description: data.weather[0].description,\n     error: ''\n    });\n  }else {\n    this.setState({\n      temperature: undefined,\n      city: undefined,\n      country: undefined,\n      humidity: undefined,\n      pressure: undefined,\n      description: undefined,\n      error: 'Enter your value'\n     });\n  }\n}\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"wrapper\">\n            <div className=\"title\">\n              <Titles />\n              </div>\n              <div className=\"form\">\n              <Form getWeather={this.getWeather} />\n              <div className=\"info\">\n              <Weather \n              temperature={this.state.temperature}\n              city={this.state.city}\n              country={this.state.country}\n              humidity={this.state.humidity}\n              pressure={this.state.pressure}\n              description={this.state.description}\n              error={this.state.error}\n              />\n              </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n\n\n      ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\n\nimport './App.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}